/*
 * MIT License
 *
 * Copyright (c) 2021, Cloudogu GmbH
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import org.gradle.util.VersionNumber

plugins {
  id 'java'
  id 'signing'
  id 'maven-publish'
  id 'org.cadixdev.licenser' version '0.6.1'
  id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
}

dependencies {
  implementation 'com.google.auto:auto-common:0.11'
  implementation 'javax.ws.rs:javax.ws.rs-api:2.1'
  implementation 'com.squareup:javapoet:1.13.0'
  implementation 'com.google.guava:guava:30.1.1-jre'

  compileOnly 'org.kohsuke.metainf-services:metainf-services:1.7'
  annotationProcessor 'org.kohsuke.metainf-services:metainf-services:1.7'

  testImplementation 'com.google.testing.compile:compile-testing:0.19'
  testImplementation 'javax.validation:validation-api:2.0.1.Final'

  // see https://github.com/google/compile-testing/issues/28
  if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
    testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
  }
}

license {
  header = project.file('LICENSE')
  tasks {
    gradle {
      files.from('Jenkinsfile', 'build.gradle', 'settings.gradle', 'gradle.properties')
    }
  }
}

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  options.encoding = 'UTF-8'
}

java {
  withSourcesJar()
  withJavadocJar()
}

repositories {
  mavenCentral()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)
      pom {
        name = 'JAX-RS Tie'
        description = 'Generates link builder from JAX-RS annotation'
        url = 'https://github.com/cloudogu/jaxrs-tie'
        inceptionYear = '2021'
        licenses {
          license {
            name = 'The MIT license'
            url = 'https://www.opensource.org/licenses/mit-license.php'
          }
        }
        developers {
          developer {
            id = 'sdorra'
            name = 'Sebastian Sdorra'
            email = 'sebastian.sdorra@cloudogu.com'
            timezone = 'Europe/Berlin'
          }
        }
        scm {
          url = 'https://github.com/cloudogu/jaxrs-tie'
          connection = 'scm:git:git://github.com/cloudogu/jaxrs-tie.git'
          developerConnection = 'scm:git:git://github.com/cloudogu/jaxrs-tie.git'
        }
        issueManagement {
          system = "github"
          url = 'https://github.com/cloudogu/jaxrs-tie/issues'
        }
      }
    }
  }
}

project.ext {
  // map signing environment variables
  // this is required because of environment variables should not have a dot in the name
  // but the gradle signing props are using dots
  // also we use the set method, because setting props with dots works neither
  if (isEnvAvailable("GPG_KEY_RING")) {
    set('signing.secretKeyRingFile', System.getenv("GPG_KEY_RING"))
  }
  if (isEnvAvailable("GPG_KEY_ID")) {
    set('signing.keyId', System.getenv("GPG_KEY_ID"))
  }
  if (isEnvAvailable("GPG_KEY_PASSWORD")) {
    set('signing.password', System.getenv("GPG_KEY_PASSWORD"))
  }
}

signing {
  sign publishing.publications
}

nexusPublishing {
  repositories {
    sonatype()
  }
}

def isEnvAvailable(String key) {
  String value = System.getenv(key)
  return value != null && !value.trim().isEmpty()
}

// release related tasks

task setVersion {
  doLast {
    if (!project.hasProperty('newVersion')) {
      throw new GradleException('usage setVersion -PnewVersion=x.y.z')
    }

    String version = project.property('newVersion')
    setNewVersion(version)
  }
}

task setVersionToNextSnapshot {
  doLast {
    setNewVersion(nextSnapshotVersion)
  }
}

task printVersion {
  doLast {
    println project.version
  }
}

def setNewVersion(String newVersion) {
  File propertiesFile = new File(project.rootDir, 'gradle.properties')

  if (project.version == newVersion) {
    println "project uses already version ${newVersion}"
    return
  }

  def lines = propertiesFile.readLines('UTF-8')
  def newLines = lines.collect{ line ->
    if (line.trim().startsWith('version')) {
      return "version = ${newVersion}"
    }
    return line
  }

  println "set version from ${project.version} to ${newVersion}"
  propertiesFile.withWriter('UTF-8') {writer ->
    newLines.forEach { line ->
      writer.writeLine(line)
    }
  }
}
